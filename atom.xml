<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>echoMu</title>
  <icon>https://www.gravatar.com/avatar/b3fc17312645f8f777b12e4537c26410</icon>
  <subtitle>听风在鼓舞，还有我作伴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://echomu.github.io/"/>
  <updated>2018-02-07T09:07:36.883Z</updated>
  <id>http://echomu.github.io/</id>
  
  <author>
    <name>echoMu</name>
    <email>xiaocaiyibin100@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>testpic</title>
    <link href="http://echomu.github.io/2018/02/07/testpic/"/>
    <id>http://echomu.github.io/2018/02/07/testpic/</id>
    <published>2018-02-07T09:05:23.000Z</published>
    <updated>2018-02-07T09:07:36.883Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/02/07/testpic/01.jpg" title="这是一个新的博客的图片的说明 01"><img src="/2018/02/07/testpic/02.jpg" title="这是一个新的博客的图片的说明 02"><img src="/2018/02/07/testpic/03.jpg" title="这是一个新的博客的图片的说明 03"><img src="/2018/02/07/testpic/04.jpg" title="这是一个新的博客的图片的说明 04"><img src="/2018/02/07/testpic/05.jpg" title="这是一个新的博客的图片的说明 05">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/02/07/testpic/01.jpg&quot; title=&quot;这是一个新的博客的图片的说明 01&quot;&gt;
&lt;img src=&quot;/2018/02/07/testpic/02.jpg&quot; title=&quot;这是一个新的博客的图片的说明 02&quot;&gt;
&lt;img src=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义View实践之给图片加上水印（支持logo+文字）吧！</title>
    <link href="http://echomu.github.io/2017/08/01/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5%E4%B9%8B%E7%BB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E4%B8%8A%E6%B0%B4%E5%8D%B0%EF%BC%88%E6%94%AF%E6%8C%81logo-%E6%96%87%E5%AD%97%EF%BC%89%E5%90%A7%EF%BC%81/"/>
    <id>http://echomu.github.io/2017/08/01/自定义View实践之给图片加上水印（支持logo-文字）吧！/</id>
    <published>2017-08-01T08:01:02.000Z</published>
    <updated>2018-02-07T08:20:57.624Z</updated>
    
    <content type="html"><![CDATA[<p>现在我们想要往图片上打上水印，该水印应符合这样的需求：</p><ol><li>支持logo+文字；</li><li>文字信息支持多行展示；</li><li>用户可以选择水印在图片上的生成位置（左上、右上、右下和左下）。</li></ol><p>粗略的界面结构图低配版大概就长这样…</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/817079-a023ab2dfc726bb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="水印结构图.png"></p><p>现在提供这样的一种思路去实现这一个需求，我们可以通过自定义一个view，view的布局中包含logo、公司名称和相关信息，这个view就是我们要打上图片的水印。</p><p>这样的一个view其实是一个自定义组合布局，关于如何实现组合布局的自定义view，可以参考这篇文章：<a href="http://www.jianshu.com/p/d378523a00d9" target="_blank" rel="noopener">Android 自定义View实践之组合控件实现布局的复用</a></p><p>这个view用起来就是这样的简便粗暴，其它属性包括背景色、logo图标等也要能够支持设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">waterMaskView = <span class="keyword">new</span> WaterMaskView(<span class="keyword">this</span>);</span><br><span class="line">RelativeLayout.LayoutParams params = <span class="keyword">new</span> RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);</span><br><span class="line">waterMaskView.setLayoutParams(params);</span><br><span class="line">waterMaskView.setCompanyText(<span class="string">"XXXXXX公司"</span>);</span><br><span class="line">waterMaskView.setInfoText(<span class="string">"这是相关信息1这是相关信息2这是相关信息3这是相关信息4这是相关信息5"</span>);</span><br></pre></td></tr></table></figure><p>有了水印的view之后，我们就可以利用以下这个方法，得到水印对应的view的Bitmap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将一个view转换为Bitmap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">convertViewToBitmap</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    view.measure(View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED), View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED));</span><br><span class="line">    view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</span><br><span class="line">    view.buildDrawingCache();</span><br><span class="line">    Bitmap bitmap = view.getDrawingCache();</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到水印对应的view的Bitmap之后，我们处理一下尺寸，保持水印的尺寸在合理范围内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据原图处理要生成的水印的宽高</span></span><br><span class="line">    <span class="keyword">float</span> width = sourBitmap.getWidth();</span><br><span class="line">    <span class="keyword">float</span> height = sourBitmap.getHeight();</span><br><span class="line">    <span class="keyword">float</span> be = width / height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">float</span>) <span class="number">16</span> / <span class="number">9</span> &gt;= be &amp;&amp; be &gt;= (<span class="keyword">float</span>) <span class="number">4</span> / <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">//在图片比例区间内16;9~4：3内，将生成的水印bitmap设置为原图宽高各自的1/5</span></span><br><span class="line">        waterBitmap = WaterMaskUtil.zoomBitmap(waterBitmap, (<span class="keyword">int</span>) width / <span class="number">5</span>, (<span class="keyword">int</span>) height / <span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (be &gt; (<span class="keyword">float</span>) <span class="number">16</span> / <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="comment">//生成4：3的水印</span></span><br><span class="line">        waterBitmap = WaterMaskUtil.zoomBitmap(waterBitmap, (<span class="keyword">int</span>) width / <span class="number">5</span>, (<span class="keyword">int</span>) width*<span class="number">3</span> / <span class="number">20</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (be &lt; (<span class="keyword">float</span>) <span class="number">4</span> / <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">//生成4：3的水印</span></span><br><span class="line">        waterBitmap = WaterMaskUtil.zoomBitmap(waterBitmap, (<span class="keyword">int</span>) height*<span class="number">4</span> / <span class="number">15</span>, (<span class="keyword">int</span>) height / <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后将它按照要求绘制在原图上，提供生成左上、右上、右下和左下四个位置的水印各自的方法，关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置水印图片在左上角</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> watermark</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingLeft</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingTop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createWaterMaskLeftTop</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Context context, Bitmap src, Bitmap watermark,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> paddingLeft, <span class="keyword">int</span> paddingTop)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createWaterMaskBitmap(src, watermark,</span><br><span class="line">            dp2px(context, paddingLeft), dp2px(context, paddingTop));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置水印图片在右下角</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> watermark</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingRight</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingBottom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createWaterMaskRightBottom</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Context context, Bitmap src, Bitmap watermark,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> paddingRight, <span class="keyword">int</span> paddingBottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createWaterMaskBitmap(src, watermark,</span><br><span class="line">            src.getWidth() - watermark.getWidth() - dp2px(context, paddingRight),</span><br><span class="line">            src.getHeight() - watermark.getHeight() - dp2px(context, paddingBottom));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置水印图片到右上角</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> watermark</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingRight</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingTop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createWaterMaskRightTop</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Context context, Bitmap src, Bitmap watermark,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> paddingRight, <span class="keyword">int</span> paddingTop)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createWaterMaskBitmap( src, watermark,</span><br><span class="line">            src.getWidth() - watermark.getWidth() - dp2px(context, paddingRight),</span><br><span class="line">            dp2px(context, paddingTop));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置水印图片到左下角</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> watermark</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingLeft</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingBottom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createWaterMaskLeftBottom</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Context context, Bitmap src, Bitmap watermark,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> paddingLeft, <span class="keyword">int</span> paddingBottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createWaterMaskBitmap(src, watermark, dp2px(context, paddingLeft),</span><br><span class="line">            src.getHeight() - watermark.getHeight() - dp2px(context, paddingBottom));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制水印图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src 原图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> watermark 水印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingLeft</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paddingTop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">createWaterMaskBitmap</span><span class="params">(Bitmap src, Bitmap watermark,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">int</span> paddingLeft, <span class="keyword">int</span> paddingTop)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> width = src.getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = src.getHeight();</span><br><span class="line">    <span class="comment">//创建一个bitmap</span></span><br><span class="line">    Bitmap newb = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);<span class="comment">// 创建一个新的和SRC长度宽度一样的位图</span></span><br><span class="line">    <span class="comment">//将该图片作为画布</span></span><br><span class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(newb);</span><br><span class="line">    <span class="comment">//在画布 0，0坐标上开始绘制原始图片</span></span><br><span class="line">    canvas.drawBitmap(src, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//在画布上绘制水印图片</span></span><br><span class="line">    canvas.drawBitmap(watermark, paddingLeft, paddingTop, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    canvas.save(Canvas.ALL_SAVE_FLAG);</span><br><span class="line">    <span class="comment">// 存储</span></span><br><span class="line">    canvas.restore();</span><br><span class="line">    <span class="keyword">return</span> newb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制后的效果应该是这样的，欢迎拍砖~</p><p><img src="http://upload-images.jianshu.io/upload_images/817079-e31e704b7d9bc362.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给图片加上水印.png"></p><p>附上源代码：<a href="https://github.com/echoMu/WaterMaskDemo" target="_blank" rel="noopener">github传送门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们想要往图片上打上水印，该水印应符合这样的需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持logo+文字；&lt;/li&gt;
&lt;li&gt;文字信息支持多行展示；&lt;/li&gt;
&lt;li&gt;用户可以选择水印在图片上的生成位置（左上、右上、右下和左下）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;粗略的界面结构图低配版大概就长这样…&lt;/p&gt;
    
    </summary>
    
    
      <category term="自定义View" scheme="http://echomu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>自定义View实践之组合控件实现布局的复用</title>
    <link href="http://echomu.github.io/2017/05/16/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5%E4%B9%8B%E7%BB%84%E5%90%88%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%B8%83%E5%B1%80%E7%9A%84%E5%A4%8D%E7%94%A8/"/>
    <id>http://echomu.github.io/2017/05/16/自定义View实践之组合控件实现布局的复用/</id>
    <published>2017-05-16T07:59:03.000Z</published>
    <updated>2018-02-07T08:21:18.560Z</updated>
    
    <content type="html"><![CDATA[<p>看到很多项目会有实现自己的标题栏的做法，通常的界面是左边按钮或文字，加上中间的标题和右边的按钮或文字组成的。比较好的一种做法是使用include标签，复用同一个xml文件来实现布局的复用。但是这种方法是通过代码的方式来设置标题，左右按钮等其他的属性，会导致布局属性和Activity代码耦合性比较高。</p><p>因此，我们要通过自定义View，继承ViewGroup子类来实现这样的布局，降低布局文件和Activity代码耦合性。</p><a id="more"></a><ol><li>首先，我们需要写出布局文件layout_custom_titlebar.xml。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;merge xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">&lt;!-- 使用merge标签减少层级 --&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">    android:id=<span class="string">"@+id/title_bar_left"</span></span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_alignParentLeft=<span class="string">"true"</span></span><br><span class="line">    android:layout_centerVertical=<span class="string">"true"</span></span><br><span class="line">    android:layout_marginLeft=<span class="string">"5dp"</span></span><br><span class="line">    android:background=<span class="string">"@null"</span></span><br><span class="line">    android:minHeight=<span class="string">"45dp"</span></span><br><span class="line">    android:minWidth=<span class="string">"45dp"</span></span><br><span class="line">    android:textSize=<span class="string">"14sp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:id=<span class="string">"@+id/title_bar_title"</span></span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_centerInParent=<span class="string">"true"</span></span><br><span class="line">    android:singleLine=<span class="string">"true"</span></span><br><span class="line">    android:textSize=<span class="string">"17sp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:id=<span class="string">"@+id/title_bar_right"</span></span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_alignParentRight=<span class="string">"true"</span></span><br><span class="line">    android:layout_centerVertical=<span class="string">"true"</span></span><br><span class="line">    android:layout_marginRight=<span class="string">"7dp"</span></span><br><span class="line">    android:background=<span class="string">"@null"</span></span><br><span class="line">    android:minHeight=<span class="string">"45dp"</span></span><br><span class="line">    android:minWidth=<span class="string">"45dp"</span></span><br><span class="line">    android:textSize=<span class="string">"14sp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/merge&gt;</span><br></pre></td></tr></table></figure><p>2.定义自定义属性</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;declare-styleable name=<span class="string">"CustomTitleBar"</span>&gt;</span><br><span class="line">    &lt;!--标题栏背景色--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"title_background_color"</span> format=<span class="string">"reference|integer"</span> /&gt;</span><br><span class="line">    &lt;!--左边按钮是否可见--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"left_button_visible"</span> format=<span class="string">"boolean"</span> /&gt;</span><br><span class="line">    &lt;!--右边按钮是否可见--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"right_button_visible"</span> format=<span class="string">"boolean"</span> /&gt;</span><br><span class="line">    &lt;!--标题文字--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"title_text"</span> format=<span class="string">"string"</span> /&gt;</span><br><span class="line">    &lt;!--标题文字颜色--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"title_text_color"</span> format=<span class="string">"color"</span> /&gt;</span><br><span class="line">    &lt;!--标题文字图标--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"title_text_drawable"</span> format=<span class="string">"reference|integer"</span> /&gt;</span><br><span class="line">    &lt;!--左边按钮文字--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"left_button_text"</span> format=<span class="string">"string"</span> /&gt;</span><br><span class="line">    &lt;!--左边按钮文字颜色--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"left_button_text_color"</span> format=<span class="string">"color"</span> /&gt;</span><br><span class="line">    &lt;!--左边按钮图标--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"left_button_drawable"</span> format=<span class="string">"reference|integer"</span> /&gt;</span><br><span class="line">    &lt;!--右边按钮文字--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"right_button_text"</span> format=<span class="string">"string"</span> /&gt;</span><br><span class="line">    &lt;!--右边按钮文字颜色--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"right_button_text_color"</span> format=<span class="string">"color"</span> /&gt;</span><br><span class="line">    &lt;!--右边按钮图标--&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"right_button_drawable"</span> format=<span class="string">"reference|integer"</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br></pre></td></tr></table></figure><p>3.自定义一个View继承ViewGroup子类，这里我们继承RelativeLayout。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTitleBar</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Button titleBarLeftBtn;</span><br><span class="line"><span class="keyword">private</span> Button titleBarRightBtn;</span><br><span class="line"><span class="keyword">private</span> TextView titleBarTitle;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomTitleBar</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomTitleBar</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">    LayoutInflater.from(context).inflate(R.layout.layout_custom_titlebar,<span class="keyword">this</span>,<span class="keyword">true</span>);</span><br><span class="line">    titleBarLeftBtn = (Button) findViewById(R.id.title_bar_left);</span><br><span class="line">    titleBarRightBtn = (Button) findViewById(R.id.title_bar_right);</span><br><span class="line">    titleBarTitle = (TextView) findViewById(R.id.title_bar_title);</span><br><span class="line"></span><br><span class="line">    TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTitleBar);</span><br><span class="line">    <span class="keyword">if</span>(typedArray!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//titleBar背景色</span></span><br><span class="line">        <span class="keyword">int</span> titleBarBackGround=typedArray.getResourceId(R.styleable.CustomTitleBar_title_background_color, Color.BLUE);</span><br><span class="line">        setBackgroundColor(titleBarBackGround);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取是否要显示左边按钮</span></span><br><span class="line">        <span class="keyword">boolean</span> leftButtonVisible = typedArray.getBoolean(R.styleable.CustomTitleBar_left_button_visible, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (leftButtonVisible) &#123;</span><br><span class="line">            titleBarLeftBtn.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            titleBarLeftBtn.setVisibility(View.INVISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置左边按钮的文字</span></span><br><span class="line">        String leftButtonText = typedArray.getString(R.styleable.CustomTitleBar_left_button_text);</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(leftButtonText)) &#123;</span><br><span class="line">            titleBarLeftBtn.setText(leftButtonText);</span><br><span class="line">            <span class="comment">//设置左边按钮文字颜色</span></span><br><span class="line">            <span class="keyword">int</span> leftButtonTextColor = typedArray.getColor(R.styleable.CustomTitleBar_left_button_text_color, Color.WHITE);</span><br><span class="line">            titleBarLeftBtn.setTextColor(leftButtonTextColor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//设置左边图片icon 这里是二选一 要么只能是文字 要么只能是图片</span></span><br><span class="line">            <span class="keyword">int</span> leftButtonDrawable = typedArray.getResourceId(R.styleable.CustomTitleBar_left_button_drawable, R.mipmap.titlebar_back_icon);</span><br><span class="line">            <span class="keyword">if</span> (leftButtonDrawable != -<span class="number">1</span>) &#123;</span><br><span class="line">                titleBarLeftBtn.setBackgroundResource(leftButtonDrawable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先获取标题是否要显示图片icon</span></span><br><span class="line">        <span class="keyword">int</span> titleTextDrawable = typedArray.getResourceId(R.styleable.CustomTitleBar_title_text_drawable, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (titleTextDrawable != -<span class="number">1</span>) &#123;</span><br><span class="line">            titleBarTitle.setBackgroundResource(titleTextDrawable);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不是图片标题 则获取文字标题</span></span><br><span class="line">            String titleText = typedArray.getString(R.styleable.CustomTitleBar_title_text);</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(titleText)) &#123;</span><br><span class="line">                titleBarTitle.setText(titleText);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取标题显示颜色</span></span><br><span class="line">            <span class="keyword">int</span> titleTextColor = typedArray.getColor(R.styleable.CustomTitleBar_title_text_color, Color.WHITE);</span><br><span class="line">            titleBarTitle.setTextColor(titleTextColor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取是否要显示右边按钮</span></span><br><span class="line">        <span class="keyword">boolean</span> rightButtonVisible = typedArray.getBoolean(R.styleable.CustomTitleBar_right_button_visible, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (rightButtonVisible) &#123;</span><br><span class="line">            titleBarRightBtn.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            titleBarRightBtn.setVisibility(View.INVISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置右边按钮的文字</span></span><br><span class="line">        String rightButtonText = typedArray.getString(R.styleable.CustomTitleBar_right_button_text);</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(rightButtonText)) &#123;</span><br><span class="line">            titleBarRightBtn.setText(rightButtonText);</span><br><span class="line">            <span class="comment">//设置右边按钮文字颜色</span></span><br><span class="line">            <span class="keyword">int</span> rightButtonTextColor = typedArray.getColor(R.styleable.CustomTitleBar_right_button_text_color, Color.BLUE);</span><br><span class="line">            titleBarRightBtn.setTextColor(rightButtonTextColor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//设置右边图片icon 这里是二选一 要么只能是文字 要么只能是图片</span></span><br><span class="line">            <span class="keyword">int</span> rightButtonDrawable = typedArray.getResourceId(R.styleable.CustomTitleBar_right_button_drawable, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (rightButtonDrawable != -<span class="number">1</span>) &#123;</span><br><span class="line">                titleBarRightBtn.setBackgroundResource(rightButtonDrawable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        typedArray.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitleClickListener</span><span class="params">(OnClickListener onClickListener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (onClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        titleBarLeftBtn.setOnClickListener(onClickListener);</span><br><span class="line">        titleBarRightBtn.setOnClickListener(onClickListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Button <span class="title">getTitleBarLeftBtn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> titleBarLeftBtn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Button <span class="title">getTitleBarRightBtn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> titleBarRightBtn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TextView <span class="title">getTitleBarTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> titleBarTitle;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.正确地使用它</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">android:orientation=<span class="string">"vertical"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;com.mumubin.demoproject.view.CustomTitleBar</span><br><span class="line">    android:id=<span class="string">"@+id/ctb_view"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"45dp"</span></span><br><span class="line">    app:right_button_drawable=<span class="string">"@mipmap/sure"</span></span><br><span class="line">    app:title_text=<span class="string">"@string/app_name"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;com.mumubin.demoproject.view.CustomTitleBar</span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"45dp"</span></span><br><span class="line">    android:layout_marginTop=<span class="string">"4dp"</span></span><br><span class="line">    app:title_background_color=<span class="string">"@color/colorPrimary"</span></span><br><span class="line">    app:title_text=<span class="string">"@string/app_name"</span></span><br><span class="line">    app:title_text_color=<span class="string">"@color/colorAccent"</span></span><br><span class="line">    app:left_button_text=<span class="string">"左边"</span></span><br><span class="line">    app:right_button_text=<span class="string">"右边"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;com.mumubin.demoproject.view.CustomTitleBar</span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"45dp"</span></span><br><span class="line">    android:layout_marginTop=<span class="string">"4dp"</span></span><br><span class="line">    app:title_text_drawable=<span class="string">"@mipmap/ic_launcher"</span></span><br><span class="line">    app:title_background_color=<span class="string">"@color/colorAccent"</span></span><br><span class="line">    app:left_button_text=<span class="string">"左边"</span></span><br><span class="line">    app:right_button_text=<span class="string">"右边"</span>/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/817079-5f5a84081f8b69ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="titlebar.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到很多项目会有实现自己的标题栏的做法，通常的界面是左边按钮或文字，加上中间的标题和右边的按钮或文字组成的。比较好的一种做法是使用include标签，复用同一个xml文件来实现布局的复用。但是这种方法是通过代码的方式来设置标题，左右按钮等其他的属性，会导致布局属性和Activity代码耦合性比较高。&lt;/p&gt;
&lt;p&gt;因此，我们要通过自定义View，继承ViewGroup子类来实现这样的布局，降低布局文件和Activity代码耦合性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自定义View" scheme="http://echomu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>webView加载网页播放优酷视频引发“请允许cookie存储”问题的解决</title>
    <link href="http://echomu.github.io/2017/04/09/webView%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91%E5%BC%95%E5%8F%91%E2%80%9C%E8%AF%B7%E5%85%81%E8%AE%B8cookie%E5%AD%98%E5%82%A8%E2%80%9D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <id>http://echomu.github.io/2017/04/09/webView加载网页播放优酷视频引发“请允许cookie存储”问题的解决/</id>
    <published>2017-04-09T08:10:56.000Z</published>
    <updated>2018-02-07T08:21:48.452Z</updated>
    
    <content type="html"><![CDATA[<p>最近，某个项目需要加载的网页内容中，含有一个优酷视频。跑起来出现了问题，优酷视频提示错误：请允许cookie存储<br><img src="http://upload-images.jianshu.io/upload_images/817079-b98c96477f367fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>从这个错误提示来看，这里存在cookie存储的相关问题。是否是本地webView没有允许cookie存储？</p><a id="more"></a><p>WebView是基于webkit内核的UI控件，相当于一个浏览器客户端。它会在本地维护每次会话的cookie(保存在data/data/package_name/app_WebView/Cookies.db)。</p><p>当WebView加载URL的时候,WebView会从本地读取该URL对应的cookie，并携带该cookie与服务器进行通信。WebView通过android.webkit.<a href="https://developer.android.com/reference/android/webkit/CookieManager.html" target="_blank" rel="noopener">CookieManager</a>类来维护cookie。<a href="https://developer.android.com/reference/android/webkit/CookieManager.html" target="_blank" rel="noopener">CookieManager</a>是WebView的cookie管理类。</p><p>那么，这里到底是哪里存在问题？考虑到出现该问题的设备是出现在Android 5.0系统上，于是翻阅Android开发者文档，找到<a href="https://developer.android.com/about/versions/android-5.0-changes.html" target="_blank" rel="noopener">Home&gt;Lollipop&gt;Android 5.0 行为变更</a>这一章节（请科学上网）。找到WebView这一部分的描述如下：</p><blockquote><p>WebView<br>Android 5.0 更改了应用的默认行为。<br><strong>如果您的应用是面向 API 级别 21 或更高级别：</strong>默认情况下，系统会阻止<a href="https://developer.mozilla.org/en-US/docs/Security/MixedContent" target="_blank" rel="noopener">混合内容</a>和第三方 Cookie。要允许混合内容和第三方 Cookie，请分别使用<a href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMixedContentMode(int" target="_blank" rel="noopener">setMixedContentMode()</a>)<br>和<a href="https://developer.android.com/reference/android/webkit/CookieManager.html#setAcceptThirdPartyCookies(android.webkit.WebView, boolean" target="_blank" rel="noopener">setAcceptThirdPartyCookies()</a>)<br>方法。<br>系统现在可以智能地选择要绘制的 HTML 文档部分。这个新的默认行为有助于减少内存占用和提升性能。如果您要一次渲染整个文档，可通过调用<a href="https://developer.android.com/reference/android/webkit/WebView.html#enableSlowWholeDocumentDraw(" target="_blank" rel="noopener">enableSlowWholeDocumentDraw()</a>)<br>停用此优化。<br><strong>如果您的应用是面向低于 21 的 API 级别：</strong>系统允许混合内容和第三方 Cookie，并始终一次渲染整个文档。 </p></blockquote><p>于是，我们找到了问题的根源所在，原来Android 5.0体统默认不支持第三方cookie的存储，像优酷视频这样的网页组件就无法正常播放视频了。</p><p>找到解决方法，我们在加载该URL之前，加入一下代码，解决了问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(android.os.Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">    CookieManager.getInstance().setAcceptThirdPartyCookies(webView,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/echoMu/Android-/blob/master/Android%20webView%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98.md" target="_blank" rel="noopener">github版本：Android webView加载网页播放优酷视频引发的问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，某个项目需要加载的网页内容中，含有一个优酷视频。跑起来出现了问题，优酷视频提示错误：请允许cookie存储&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/817079-b98c96477f367fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这个错误提示来看，这里存在cookie存储的相关问题。是否是本地webView没有允许cookie存储？&lt;/p&gt;
    
    </summary>
    
    
      <category term="webView" scheme="http://echomu.github.io/tags/webView/"/>
    
  </entry>
  
  <entry>
    <title>自定义View实践之EditText字数的简单计数器</title>
    <link href="http://echomu.github.io/2017/02/27/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5%E4%B9%8BEditText%E5%AD%97%E6%95%B0%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://echomu.github.io/2017/02/27/自定义View实践之EditText字数的简单计数器/</id>
    <published>2017-02-27T07:51:33.000Z</published>
    <updated>2018-02-07T08:22:28.264Z</updated>
    
    <content type="html"><![CDATA[<p>这是继承View类的子类来实现自定义View的例子。</p><p>写一个类似于微博的140字限制的简单文本计算器，实现的思路是继承TextView,绑定一个EditText，通过添加EditText的addTextChangedListener，对调用者提供当前自定义View的回调接口，实现超出字数的回调。</p><a id="more"></a><p>自定义属性如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">  &lt;resources&gt;</span><br><span class="line">    &lt;declare-styleable name=<span class="string">"CountCharTextView"</span>&gt;</span><br><span class="line">      &lt;!--用户可输入的最大字数--&gt;</span><br><span class="line">      &lt;attr name="maxChars" format="integer"&gt;&lt;/attr&gt;</span><br><span class="line">      &lt;!--溢出字数提示--&gt;</span><br><span class="line">      &lt;attr name="exceedTextColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;/declare-styleable&gt;</span><br><span class="line">  &lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>继承TextView，实现以下CountCharTextView：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本字数的简单计算器</span></span><br><span class="line"><span class="comment"> * Created by echoMu on 2017/2/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountCharTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> maxChars;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> defaultMaxChars = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> exceedTextColor;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> defaultTextColor = Color.BLACK;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> CountCharChangedListener listener;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountCharChangedListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCountChanged</span><span class="params">(<span class="keyword">int</span> countRemaining, <span class="keyword">boolean</span> hasExceededLimit)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CountCharTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CountCharTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CountCharTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line"></span><br><span class="line">    init(context, attrs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    setText(String.valueOf(maxLength));</span><br><span class="line"></span><br><span class="line">    TypedArray t = context.obtainStyledAttributes(attrs, R.styleable.CountCharTextView);</span><br><span class="line">    exceedTextColor = t.getColor(R.styleable.CountCharTextView_exceedTextColor, Color.RED);</span><br><span class="line">    maxChars = t.getInteger(R.styleable.CountCharTextView_maxChars, defaultMaxChars);</span><br><span class="line"></span><br><span class="line">    t.recycle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEditText</span><span class="params">(EditText targetEt)</span> </span>&#123;</span><br><span class="line">    targetEt.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable editable)</span> </span>&#123;</span><br><span class="line">            String inputText = editable.toString();</span><br><span class="line">            <span class="keyword">int</span> leftChars = maxChars - inputText.length();</span><br><span class="line">            <span class="keyword">boolean</span> hasExceeded = inputText.length() &gt; maxChars;</span><br><span class="line"><span class="comment">//                if (leftChars &lt;= (Math.round(maxChars * 0.1))) &#123;</span></span><br><span class="line">            <span class="comment">//剩下10%的字数，变色提示</span></span><br><span class="line">            <span class="keyword">if</span> (leftChars &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//达到最大字数限制，变色提示</span></span><br><span class="line">                setTextColor(exceedTextColor);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setTextColor(defaultTextColor);</span><br><span class="line">            &#125;</span><br><span class="line">            setText(String.valueOf(leftChars));</span><br><span class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                listener.onCountChanged(leftChars, hasExceeded);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"A CountCharChangedListener has not been set!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharCountChangedListener</span><span class="params">(CountCharChangedListener listener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listener = listener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxChars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maxChars;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置最大输入字符</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxChars</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxChars</span><span class="params">(<span class="keyword">int</span> maxChars)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.maxChars = maxChars;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExceedTextColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> exceedTextColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置溢出字符数文本颜色</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exceedTextColor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExceedTextColor</span><span class="params">(<span class="keyword">int</span> exceedTextColor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.exceedTextColor = exceedTextColor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是继承View类的子类来实现自定义View的例子。&lt;/p&gt;
&lt;p&gt;写一个类似于微博的140字限制的简单文本计算器，实现的思路是继承TextView,绑定一个EditText，通过添加EditText的addTextChangedListener，对调用者提供当前自定义View的回调接口，实现超出字数的回调。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自定义View" scheme="http://echomu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>自定义View实践之圆形进度ProgressBar</title>
    <link href="http://echomu.github.io/2017/02/24/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6ProgressBar/"/>
    <id>http://echomu.github.io/2017/02/24/自定义View实践之圆形进度ProgressBar/</id>
    <published>2017-02-24T07:36:36.000Z</published>
    <updated>2018-02-07T07:55:52.075Z</updated>
    
    <content type="html"><![CDATA[<p>这是继承View类的一个自定义View。<br>为了实现一个带有进度文本的圆形ProgressBar，我们自定义开发一个RoundProgressBar。</p><a id="more"></a><p>效果是这样的<br><img src="http://upload-images.jianshu.io/upload_images/817079-7b5fa86d50c91237.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="device-2017-02-24-165125.png"></p><p>1.新建一个ProgressBar类继承View类，复写其构造函数和onDraw函数；<br>2.在values中建立一个attrs.xml文件来存放自定义view的属性；<br>3.从xml文件中获取自定义的view类中的各个属性值；<br>4.同时对使用者提供set和get方法进行各个属性的设置；</p><p>首先要整理出我们需要的view的属性有哪些，我们定义了这些属性：</p><table><thead><tr><th>属性名称</th><th style="text-align:center">属性作用</th></tr></thead><tbody><tr><td>max</td><td style="text-align:center">最大进度</td></tr><tr><td>startAngle</td><td style="text-align:center">进度从圆环的哪个角度开始走</td></tr><tr><td>backColor</td><td style="text-align:center">圆环内部的填充色</td></tr><tr><td>roundColor</td><td style="text-align:center">圆环的颜色</td></tr><tr><td>roundProgressColor</td><td style="text-align:center">圆环进度的颜色</td></tr><tr><td>roundWidth</td><td style="text-align:center">圆环宽度</td></tr><tr><td>textColor</td><td style="text-align:center">中心文字的颜色</td></tr><tr><td>textSize</td><td style="text-align:center">中心文字的大小</td></tr><tr><td>textIsDisplayable</td><td style="text-align:center">中心文字是否显示</td></tr><tr><td>style = 0/1</td><td style="text-align:center">进度的风格，实心或者空心</td></tr></tbody></table><p>通过键值对的形式来存放键（name）：属性名，和值（format）：属性的类型（限制输入的类型），attrs.xml文件如下;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;declare-styleable name=<span class="string">"RoundProgressBar"</span>&gt;</span><br><span class="line">    &lt;attr name="max" format="integer"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="startAngle" format="integer"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="backColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="roundColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="roundProgressColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="roundWidth" format="dimension"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="textColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="textSize" format="dimension"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="textIsDisplayable" format="boolean"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"style"</span>&gt;</span><br><span class="line">        &lt;enum name="STROKE" value="0"&gt;&lt;/enum&gt;</span><br><span class="line">        &lt;enum name="FILL" value="1"&gt;&lt;/enum&gt;</span><br><span class="line">    &lt;/attr&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>有了这些属性，我们就可以获取它们的值了，在ProgressBar类中的构造函数进行初始化工作，使用TypedArray，得到每一项属性的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TypedArray mTypedArray = context.obtainStyledAttributes(attrs, R.styleable.RoundProgressBar);</span><br><span class="line"><span class="comment">//获取自定义属性和默认值，第一个参数是从用户属性中得到的设置，如果用户没有设置，那么就用默认的属性，即：第二个参数</span></span><br><span class="line"><span class="comment">//圆环的颜色</span></span><br><span class="line">roundColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundColor, Color.BLACK);</span><br><span class="line"><span class="comment">//圆环进度的颜色</span></span><br><span class="line">roundProgressColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundProgressColor, Color.RED);</span><br><span class="line"><span class="comment">//中间进度百分比的字符串的颜色</span></span><br><span class="line">textColor = mTypedArray.getColor(R.styleable.RoundProgressBar_textColor, Color.BLUE);</span><br><span class="line"><span class="comment">//文字的大小</span></span><br><span class="line">textSize = mTypedArray.getDimension(R.styleable.RoundProgressBar_textSize, <span class="number">24</span>);</span><br><span class="line"><span class="comment">//圆环的宽度</span></span><br><span class="line">roundWidth = mTypedArray.getDimension(R.styleable.RoundProgressBar_roundWidth, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//最大进度</span></span><br><span class="line">max = mTypedArray.getInteger(R.styleable.RoundProgressBar_max, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//是否显示中间的进度</span></span><br><span class="line">textIsDisplayable = mTypedArray.getBoolean(R.styleable.RoundProgressBar_textIsDisplayable, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//进度的风格，实心或者空心</span></span><br><span class="line">style = mTypedArray.getInt(R.styleable.RoundProgressBar_style, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//进度开始的角度数</span></span><br><span class="line">startAngle = mTypedArray.getInt(R.styleable.RoundProgressBar_startAngle, -<span class="number">90</span>);</span><br><span class="line"><span class="comment">// 圆形颜色</span></span><br><span class="line">backColor = mTypedArray.getColor(R.styleable.RoundProgressBar_backColor, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回收</span></span><br><span class="line">mTypedArray.recycle();</span><br></pre></td></tr></table></figure><p>一切准备工作做完，我们就可以在onDraw函数中开始绘制了：</p><pre><code class="java"><span class="meta">@Override</span><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>{    <span class="keyword">super</span>.onDraw(canvas);    <span class="comment">//进行绘制</span>    <span class="comment">//1.画最外层的大圆环</span>    <span class="comment">//获取圆心的x坐标</span>    <span class="keyword">int</span> centre = getWidth() / <span class="number">2</span>;    <span class="comment">//圆环的半径</span>    <span class="keyword">int</span> radius = (<span class="keyword">int</span>) (centre - roundWidth / <span class="number">2</span>);    <span class="comment">//设置圆环的颜色</span>    paint.setColor(roundColor);    <span class="comment">//设置空心</span>    paint.setStyle(Paint.Style.STROKE);    <span class="comment">//设置圆环的宽度</span>    paint.setStrokeWidth(roundWidth);    <span class="comment">//消除锯齿</span>    paint.setAntiAlias(<span class="keyword">true</span>);    <span class="comment">//画出圆环</span>    canvas.drawCircle(centre, centre, radius, paint);    <span class="keyword">if</span> (backColor != <span class="number">0</span>) {        paint.setColor(backColor);        paint.setStyle(Paint.Style.FILL);        canvas.drawCircle(centre, centre, radius, paint);    }    <span class="comment">//画进度百分比字体</span>    paint.setStrokeWidth(<span class="number">0</span>);    paint.setColor(textColor);    paint.setTextSize(textSize);    paint.setTypeface(Typeface.DEFAULT_BOLD);    <span class="comment">//中间的进度百分比，先转换成float在进行除法运算，不然都为0</span>    <span class="keyword">int</span> percent = (<span class="keyword">int</span>) (((<span class="keyword">float</span>) progress / (<span class="keyword">float</span>) max) * <span class="number">100</span>);    <span class="comment">//测量字体宽度，我们需要根据字体的宽度设置在圆环中间</span>    <span class="keyword">float</span> textWidth = paint.measureText(percent + <span class="string">"%"</span>);    <span class="keyword">if</span> (textIsDisplayable &amp;&amp; percent != <span class="number">0</span> &amp;&amp; style == STROKE) {        <span class="comment">//绘制文字</span>        <span class="comment">//宽 centre - textWidth / 2</span>        <span class="comment">//高 centre + textSize / 2</span>        canvas.drawText(percent + <span class="string">"%"</span>, centre - textWidth / <span class="number">2</span>, centre + textSize / <span class="number">2</span>, paint);    }    <span class="comment">//画圆弧 ，圆环的进度</span>    <span class="comment">//设置圆环的宽度</span>    paint.setStrokeWidth(roundWidth);    <span class="comment">//设置进度的颜色</span>    paint.setColor(roundProgressColor);    <span class="comment">//用于定义的圆弧的形状和大小的界限</span>    RectF oval = <span class="keyword">new</span> RectF(centre - radius, centre - radius, centre            + radius, centre + radius);    <span class="keyword">switch</span> (style) {        <span class="keyword">case</span> STROKE: {            paint.setStyle(Paint.Style.STROKE);            <span class="comment">/*第二个参数是进度开始的角度，-90表示从12点方向开始走进度，如果是0表示从三点钟方向走进度，依次类推</span><span class="comment">             *public void drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</span><span class="comment">                oval :指定圆弧的外轮廓矩形区域。</span><span class="comment">                startAngle: 圆弧起始角度，单位为度。</span><span class="comment">                sweepAngle: 圆弧扫过的角度，顺时针方向，单位为度。</span><span class="comment">                useCenter: 如果为True时，在绘制圆弧时将圆心包括在内，通常用来绘制扇形。</span><span class="comment">                paint: 绘制圆弧的画板属性，如颜色，是否填充等</span><span class="comment">             *</span><span class="comment">            */</span>            canvas.drawArc(oval, startAngle, <span class="number">360</span> * progress / max, <span class="keyword">false</span>, paint);  <span class="comment">//根据进度画圆弧</span>            <span class="keyword">break</span>;        }        <span class="keyword">case</span> FILL: {            paint.setStyle(Paint.Style.FILL_AND_STROKE);            <span class="keyword">if</span> (progress != <span class="number">0</span>)                canvas.drawArc(oval, startAngle, <span class="number">360</span> * progress / max, <span class="keyword">true</span>, paint);  <span class="comment">//根据进度画圆弧</span>            <span class="keyword">break</span>;        }    }}</code></pre><p>完成之后就可以使用它了，例如要这样的ProgressBar;</p><pre><code class="java">&lt;TextView    android:layout_width=<span class="string">"wrap_content"</span>    android:layout_height=<span class="string">"wrap_content"</span>    android:text=<span class="string">"无数字，环形"</span> /&gt;&lt;com.echomu.customsprogressbar.view.RoundProgressBar    android:id=<span class="string">"@+id/rpb_04"</span>    android:layout_width=<span class="string">"80dp"</span>    android:layout_height=<span class="string">"80dp"</span>    android:layout_margin=<span class="string">"8dp"</span>    app:startAngle=<span class="string">"30"</span>    app:roundColor=<span class="string">"#C6E2FF"</span>    app:roundWidth=<span class="string">"10dip"</span>    app:roundProgressColor=<span class="string">"#CD3333"</span>    app:textIsDisplayable=<span class="string">"false"</span>/&gt;</code></pre><p><a href="https://github.com/mumubin5/CustomsProgressBar" target="_blank" rel="noopener">github版：Android 自定义View实践之圆形进度ProgressBar</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是继承View类的一个自定义View。&lt;br&gt;为了实现一个带有进度文本的圆形ProgressBar，我们自定义开发一个RoundProgressBar。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自定义View" scheme="http://echomu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView滚动到指定位置</title>
    <link href="http://echomu.github.io/2017/02/09/RecyclerView%E6%BB%9A%E5%8A%A8%E5%88%B0%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/"/>
    <id>http://echomu.github.io/2017/02/09/RecyclerView滚动到指定位置/</id>
    <published>2017-02-09T08:27:29.000Z</published>
    <updated>2018-02-07T08:28:53.174Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView提供了若干个方法来进行滚动：<br>1.scrollTo(int x, int y)</p><blockquote><p>Set the scrolled position of your view.</p></blockquote><p>  和scrollBy(int x, int y)</p><blockquote><p>Move the scrolled position of your view. </p></blockquote><p>  这2个方法需要我们去控制移动的距离，自己计算高度或者宽度。在动态的布局中且各项样式高度可能都不一样的情况下，比较有难度。</p><a id="more"></a><p>2.scrollToPosition(int position)</p><blockquote><p>Convenience method to scroll to a certain position. RecyclerView does not implement scrolling logic, rather forwards the call to RecyclerView.LayoutManager.scrollToPosition(int) </p></blockquote><p>使用scrollToPosition时，移动到当前屏幕可见列表的前面的项时，它会将要显示的项置顶。但是移动到后面的项时，一般会显示在最后的位置。</p><p>因此，综合以上两个方法，我们可以先用scrollToPosition方法，将要置顶的项先移动显示出来，然后计算这一项离顶部的距离，用scrollBy完成最后的距离！</p><p>首先，按照要置顶的那一项在当前屏幕可见的列表中的相对位置来区分要处理的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToPosition</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前recycleView屏幕可见的第一项和最后一项的Position</span></span><br><span class="line">    <span class="keyword">int</span> firstItem = linearLayoutManager.findFirstVisibleItemPosition();</span><br><span class="line">    <span class="keyword">int</span> lastItem = linearLayoutManager.findLastVisibleItemPosition();</span><br><span class="line">    <span class="comment">//然后区分情况</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt;= firstItem) &#123;</span><br><span class="line">        <span class="comment">//当要置顶的项在当前显示的第一个项的前面时</span></span><br><span class="line">        rv.scrollToPosition(index);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt;= lastItem) &#123;</span><br><span class="line">        <span class="comment">//当要置顶的项已经在屏幕上显示时，计算它离屏幕原点的距离</span></span><br><span class="line">        <span class="keyword">int</span> top = rv.getChildAt(index - firstItem).getTop();</span><br><span class="line">        rv.scrollBy(<span class="number">0</span>, top);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//当要置顶的项在当前显示的最后一项的后面时</span></span><br><span class="line">        rv.scrollToPosition(index);</span><br><span class="line">        <span class="comment">//记录当前需要在RecyclerView滚动监听里面继续第二次滚动</span></span><br><span class="line">        move = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为recycleView添加滚动监听，当完成第一次滚动后，进行第二次的滚动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户点击的分类在rv的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mIndex;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rv是否需要第二次滚动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> move = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewListener</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">OnScrollListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class="line">        <span class="comment">//在这里进行第二次滚动（最后的距离）</span></span><br><span class="line">        <span class="keyword">if</span> (move) &#123;</span><br><span class="line">            move = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//获取要置顶的项在当前屏幕的位置，mIndex是记录的要置顶项在RecyclerView中的位置</span></span><br><span class="line">            <span class="keyword">int</span> n = mIndex - linearLayoutManager.findFirstVisibleItemPosition();</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= n &amp;&amp; n &lt; rv.getChildCount()) &#123;</span><br><span class="line">                <span class="comment">//获取要置顶的项顶部离RecyclerView顶部的距离</span></span><br><span class="line">                <span class="keyword">int</span> top = rv.getChildAt(n).getTop();</span><br><span class="line">                <span class="comment">//最后的移动</span></span><br><span class="line">                rv.scrollBy(<span class="number">0</span>, top);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成RecyclerView滚动到指定位置的任务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RecyclerView提供了若干个方法来进行滚动：&lt;br&gt;1.scrollTo(int x, int y)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Set the scrolled position of your view.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  和scrollBy(int x, int y)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Move the scrolled position of your view. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这2个方法需要我们去控制移动的距离，自己计算高度或者宽度。在动态的布局中且各项样式高度可能都不一样的情况下，比较有难度。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用gradle打包的各种配置</title>
    <link href="http://echomu.github.io/2016/09/08/%E4%BD%BF%E7%94%A8gradle%E6%89%93%E5%8C%85%E7%9A%84%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE/"/>
    <id>http://echomu.github.io/2016/09/08/使用gradle打包的各种配置/</id>
    <published>2016-09-08T08:47:09.000Z</published>
    <updated>2018-02-07T09:17:58.735Z</updated>
    
    <content type="html"><![CDATA[<p>在AS中利用gradle打包，可以高效并且自由地配置各种参数，发布不同的版本。关于配置gradle文件的一些做法，总结为如下。</p><a id="more"></a><p>####一.替换AndroidManifest中的占位符<br>举个例子，在AndroidManifest文件中，我们将极光推送的key值指定为一个占位符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 极光KEY --&gt;</span><br><span class="line">&lt;meta-data    </span><br><span class="line">  android:name=<span class="string">"JPUSH_APPKEY"</span>   </span><br><span class="line">  android:value=<span class="string">"$&#123;JPUSH_APPKEY&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure><p>在build.gradle文件中，这里介绍3种方法去替换该占位符<br>1.接收gradlew assemble命令输入的自定义参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">manifestPlaceholders = [        </span><br><span class="line">            <span class="comment">// 默认是正式的极光key        </span></span><br><span class="line">            JPUSH_APPKEY: <span class="string">"\""</span> + JPUSH_APPKEY_PARA + <span class="string">"\""</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.使用string文件的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manifestPlaceholders = [JPUSH_APPKEY:<span class="string">"@string/JPUSH_APPKEY"</span>]</span><br></pre></td></tr></table></figure><p>3.使用gradle.properties文件的值，具体参考第九</p><p>####二.独立配置签名信息<br>签名相关的信息,直接写在gradle不利于安全，我们可以把这些信息写到工程主module根目录下的signing.properties文件，注意这个文件不要添加进版本控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KEYSTORE_FILE=你的keystore文件位置</span><br><span class="line">KEYSTORE_PASSWORD= 你的keystore文件密码</span><br><span class="line">KEY_ALIAS= 你的keystore文件用到的别名</span><br><span class="line">KEY_PASSWORD= 你的keystore文件用到的别名的密码</span><br></pre></td></tr></table></figure><p>然后在build.gradle中加载这个文件，引用其中的参数就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载签名配置的文件</span></span><br><span class="line">Properties props = <span class="keyword">new</span> Properties()props.load(<span class="keyword">new</span></span><br><span class="line">FileInputStream(file(<span class="string">"signing.properties"</span>)))</span><br><span class="line">android &#123;</span><br><span class="line">  signingConfigs &#123;    </span><br><span class="line">    release&#123;        </span><br><span class="line">        <span class="comment">//设置release的签名信息       </span></span><br><span class="line">        keyAlias props[<span class="string">'KEY_ALIAS'</span>]        </span><br><span class="line">        keyPassword props[<span class="string">'KEY_PASSWORD'</span>]        </span><br><span class="line">        <span class="function">storeFile <span class="title">file</span><span class="params">(props[<span class="string">'KEYSTORE_FILE'</span>])</span>        </span></span><br><span class="line"><span class="function">        storePassword props['KEYSTORE_PASSWORD']    </span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  buildTypes </span>&#123;</span><br><span class="line">      debug &#123;</span><br><span class="line">        ...</span><br><span class="line">        signingConfig signingConfigs.release&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ...    </span><br><span class="line">      release &#123;</span><br><span class="line">        ...</span><br><span class="line">        signingConfig signingConfigs.release&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####三. 多渠道打包<br>国内应用市场非常多，为了统计各个应用市场的app下载量和使用情况，我们需要多渠道的打包。</p><p>1.配置AndroidManifest.xml<br>以友盟渠道为例，渠道信息一般都是写在 AndroidManifest.xml文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name=<span class="string">"UMENG_CHANNEL"</span> android:value=<span class="string">"xiaomi"</span> /&gt;</span><br></pre></td></tr></table></figure><p>如果不使用多渠道打包方法，那就需要我们手动一个一个去修改value中的值，xiaomi，360，qq，wandoujia等等。使用多渠道打包的方式，就需要把上面的value配置成下面的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name=<span class="string">"UMENG_CHANNEL"</span> android:value=<span class="string">"$&#123;UMENG_CHANNEL_VALUE&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure><p>其中${UMENG_CHANNEL_VALUE}中的值就是你在gradle中自定义配置的值。</p><p>2.在build.gradle设置productFlavors<br>写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123; </span><br><span class="line">  wandoujia  &#123; </span><br><span class="line">    manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"wandoujia"</span>] </span><br><span class="line">  &#125; </span><br><span class="line">  xiaomi  &#123; </span><br><span class="line">    manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>] </span><br><span class="line">  &#125;</span><br><span class="line">  qq  &#123; </span><br><span class="line">    manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"qq"</span>] </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="number">360</span>  &#123; </span><br><span class="line">    manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"360"</span>] </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中[UMENG_CHANNEL_VALUE: “wandoujia”]就是对应<br>${UMENG_CHANNEL_VALUE}的值。这里还有简洁的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;</span><br><span class="line">      debug &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      ...    </span><br><span class="line">      release &#123;</span><br><span class="line">        ...</span><br><span class="line">        productFlavors &#123; </span><br><span class="line">            wandoujia&#123;&#125; </span><br><span class="line">            xiaomi&#123;&#125; </span><br><span class="line">            qq&#123;&#125; </span><br><span class="line">            <span class="number">360</span> &#123;&#125; </span><br><span class="line">        &#125; </span><br><span class="line">        productFlavors.all &#123; flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中name的值对相对应各个productFlavors的选项值，这样就达到自动替换渠道值的目的了。这样（用AS自带工具Generate signed apk）生成apk时，选择相应的Flavors来生成指定渠道的包就可以了，而且生成的apk会自动帮你加上相应渠道的后缀。</p><p>3.一次生成所有渠道包<br>使用CMD命令，进入到项目所在的目录，直接输入命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle assembleRelease</span><br></pre></td></tr></table></figure><p>就可以打Release包，或者，在Android Studio中的下方底栏中有个命令行工具Terminal，你也可以直接打开，输入上面的命令，进行打包。</p><p><strong>注意：如果没有对gradle配置的话，可能输入上面的命令，会提示“不是内部或者外部命令”，不要着急，我们只需要找到gradle的目录，把它配置到电脑中的环境变量中去即可。</strong></p><p>配置方式如下：</p><p>先找到gralde的根目录，在系统变量里添加两个环境变量：</p><p>变量名为：GRADLE_HOME，变量值就为gradle的根目录；</p><p>比如变量值为：<br>D:androidandroid-studio-ide-143.2739321-windowsandroid-studiogradlegradle-2.10</p><p>还有一个在系统变量里PATH里面添加gradle的bin目录</p><p>比如：<br>D:androidandroid-studio-ide-143.2739321-windowsandroid-studiogradlegradle-2.10bin</p><p>这样就配置完了，执行以下这个命令：gradle assembleRelease，看看是不是可以了。</p><p>####4.修改导出包的文件目录和apk名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个打包时间</span></span><br><span class="line"><span class="function">def <span class="title">releaseTime</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyyMMdd"</span>, TimeZone.getTimeZone(<span class="string">"UTC"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;</span><br><span class="line">      debug &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      ...    </span><br><span class="line">      release &#123;</span><br><span class="line">        ...</span><br><span class="line">        applicationVariants.all &#123; </span><br><span class="line">            variant -&gt;    variant.outputs.each &#123; output -&gt;        </span><br><span class="line">                def outputFile = output.outputFile        </span><br><span class="line">                <span class="keyword">if</span> (outputFile != <span class="keyword">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)) &#123;           </span><br><span class="line">                    <span class="comment">// 输出apk名称为XXX20160328_v1.0.0_vc10_XXXX_test.apk        </span></span><br><span class="line">                    <span class="keyword">if</span> (project.hasProperty(<span class="string">'ENVIRONMENT_PARA'</span>) </span><br><span class="line">                    def fileName=<span class="string">" XXX$&#123;releaseTime()&#125;_v$&#123;defaultConfig.versionName&#125;_vc$&#123;defaultConfig.versionCode&#125;_$&#123;variant.productFlavors[0].name&#125;_$&#123;ENVIRONMENT_PARA&#125;.apk"</span>                  </span><br><span class="line">                    <span class="comment">//控制输出的APK的存放路径                </span></span><br><span class="line">                    <span class="keyword">if</span> (project.hasProperty(<span class="string">'OUT_PUT_DIR_PARA'</span>)) &#123;                    </span><br><span class="line">                        File output_dir1 = file(<span class="string">"$&#123;OUT_PUT_DIR_PARA&#125;"</span>);                    </span><br><span class="line">                        output.outputFile = <span class="keyword">new</span> File(output_dir1, fileName)                    </span><br><span class="line">                         println <span class="string">"输出文件位置： "</span> + output.outputFile                </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;                    </span><br><span class="line">                        output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)                    </span><br><span class="line">                        println <span class="string">"输出文件位置： "</span> + output.outputFile                </span><br><span class="line">                    &#125;            </span><br><span class="line">                &#125;        </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####四.多工程全局配置<br>随着产品渠道的铺开，往往一套代码需要支持多个产品形态，这就需要抽象出主要代码到一个Library，然后基于Library扩展几个App Module。相信每个module的build.gradle都会有这个代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123; </span><br><span class="line">  compileSdkVersion <span class="number">22</span> </span><br><span class="line">  buildToolsVersion <span class="string">"23.0.1"</span> </span><br><span class="line">  defaultConfig &#123; </span><br><span class="line">    minSdkVersion <span class="number">10</span> </span><br><span class="line">    targetSdkVersion <span class="number">22</span> </span><br><span class="line">    versionCode <span class="number">34</span> </span><br><span class="line">    versionName <span class="string">"v2.6.1"</span> </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>当升级sdk、build tool、target sdk等，几个module都要更改，非常的麻烦。也可能导致app module之间的差异不统一，导致不可控。强大的gradle插件在1.1.0之后支持全局变量设定，一举解决了这个问题。先在project的根目录下的build.gradle定义ext全局变量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ext &#123; </span><br><span class="line">  compileSdkVersion = <span class="number">22</span> </span><br><span class="line">  buildToolsVersion = <span class="string">"23.0.1"</span> </span><br><span class="line">  minSdkVersion = <span class="number">10</span> </span><br><span class="line">  targetSdkVersion = <span class="number">22</span> </span><br><span class="line">  versionCode = <span class="number">34</span> </span><br><span class="line">  versionName = <span class="string">"v2.6.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在各module的build.gradle中引用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123; </span><br><span class="line">  compileSdkVersion rootProject.ext.compileSdkVersion </span><br><span class="line">  buildToolsVersion rootProject.ext.buildToolsVersion </span><br><span class="line"></span><br><span class="line">  defaultConfig &#123; </span><br><span class="line">    applicationId <span class="string">"com.xxx.xxx"</span> </span><br><span class="line">    minSdkVersion rootProject.ext.minSdkVersion </span><br><span class="line">    targetSdkVersion rootProject.ext.targetSdkVersion </span><br><span class="line">    versionCode rootProject.ext.versionCode </span><br><span class="line">    versionName rootProject.ext.versionName </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次修改project级别的build.gradle即可实现全局统一配置。</p><p>####五.混淆代码<br>release版本开启混淆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//混淆编译</span></span><br><span class="line">minifyEnabled <span class="keyword">true</span></span><br><span class="line"><span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></span><br></pre></td></tr></table></figure><p>混淆文件可以参考这篇文章进行配置<a href="http://www.jianshu.com/p/e19cc5194a31" target="_blank" rel="noopener">Android代码混淆在AS的实践</a></p><p>####六.动态设置一些额外信息<br>把当前的编译时间、编译的机器、最新的commit版本添加到apk</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">android &#123; </span><br><span class="line">  defaultConfig &#123; </span><br><span class="line">      resValue <span class="string">"string"</span>, <span class="string">"build_time"</span>, buildTime() </span><br><span class="line">      resValue <span class="string">"string"</span>, <span class="string">"build_host"</span>, hostName() </span><br><span class="line">      resValue <span class="string">"string"</span>, <span class="string">"build_revision"</span>, revision() </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">buildTime</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">hostName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> System.getProperty(<span class="string">"user.name"</span>) + <span class="string">"@"</span> + InetAddress.localHost.hostName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">revision</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      def code = <span class="keyword">new</span> ByteArrayOutputStream() </span><br><span class="line">      exec &#123; </span><br><span class="line">        commandLine <span class="string">'git'</span>, <span class="string">'rev-parse'</span>, <span class="string">'--short'</span>, <span class="string">'HEAD'</span> </span><br><span class="line">        standardOutput = code </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> code.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码实现了动态的添加了3个字符串资源: build_time、build_host、build_revision, 然后在其他地方可像如引用字符串一样使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Activity里调用</span></span><br><span class="line">getString(R.string.build_time) <span class="comment">// 输出2016-09-07 17:01</span></span><br><span class="line">getString(R.string.build_host) <span class="comment">// 输出电脑的用户名和PC</span></span><br><span class="line">getString(R.string.build_revision) <span class="comment">// 输出3dd5823, 这是最后一次commit的sha值</span></span><br></pre></td></tr></table></figure><p>####七.buildConfigField自定义配置<br>大家可能会遇到下面这种情况，就是Beta版本服务器和Release版本服务器通常不在一台服务器上，而测试希望可以同时发布两个服务器的版本用于测试，这个时候我们就需要修改代码，然后一个一个老老实实的发包。gradle提供buildConfigField配合多渠道打不同服务器版本的方法。其实用法很简单,首先在相应的节点加上定义，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123; </span><br><span class="line">  debug &#123; </span><br><span class="line">    buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span><span class="comment">//是否输出LOG信息   </span></span><br><span class="line">    buildConfigField <span class="string">"String"</span>, <span class="string">"API_HOST"</span>, <span class="string">"\"http://api.test.com\""</span><span class="comment">//API Host </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在代码中通过BuildConfig.LOG_DEBUG或者BuildConfig.API_HOST调用即可。</p><p>####八.dex突破65535的限制<br>随着项目的一天天变大，慢慢的都会遇到单个dex最多65535个方法数的瓶颈，如果是ANT构建的项目就会比较麻烦，但是Gradle已经帮我们处理好了，而添加的方法也很简单，总共就分三步 :<br>1.首先是在defaultConfig节点使能多DEX功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123; </span><br><span class="line">  defaultConfig &#123; </span><br><span class="line">      <span class="comment">// dex突破65535的限制 </span></span><br><span class="line">      multiDexEnabled <span class="keyword">true</span> </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.然后就是引入multidex库文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123; </span><br><span class="line">  compile <span class="string">'com.android.support:multidex:1.0.0'</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.最后就是你的AppApplication继承一下MultiDexApplication即可。</p><p>####九.在gradle.properties文件中配置服务器生产环境和正式环境的地址、第三方服务appkey以及对于包名的配置<br>项目中加入用到一些第三方的SDK的话，就避免不了各种key的写入，一般都会有生产环境和正式环境各自使用的值<br><strong>gradle.properties如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 极光推送的测试key</span><br><span class="line">JPUSH_APPKEY_VALUE_DEBUG=<span class="number">111111111111111111</span></span><br><span class="line"># 极光推送的正式key</span><br><span class="line">JPUSH_APPKEY_VALUE_RELEASE=<span class="number">111111111111111111</span></span><br><span class="line"># 极光推送的测试key对应的包名</span><br><span class="line">APPLICATIONID_JPUSH=com.xxx.xxx</span><br><span class="line"># 极光推送的正式key对应的包名</span><br><span class="line">APPLICATIONID_RELEASE=com.xxx.xxx</span><br><span class="line"># 测试环境地址</span><br><span class="line">BASE_URL_TEST=</span><br><span class="line"># 正式环境地址</span><br><span class="line">BASE_URL_REAL=</span><br></pre></td></tr></table></figure><p>在build.gradle文件中引用，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">  <span class="keyword">if</span> (project.hasProperty(<span class="string">'JPUSH_APPKEY_PARA'</span>)) &#123;    </span><br><span class="line">    <span class="comment">//如果有指定极光key的自定义参数，那么就设置极光推送测试key对应的appId</span></span><br><span class="line">    applicationId project.APPLICATIONID_JPUSH</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">    <span class="comment">//工程本来的appId    </span></span><br><span class="line">    applicationId project.APPLICATIONID_RELEASE</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   manifestPlaceholders = [                </span><br><span class="line">      <span class="comment">// 默认是正式的极光key</span></span><br><span class="line">      JPUSH_APPKEY: project.JPUSH_APPKEY_VALUE_RELEASE        </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可配合buildConfigField自定义配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buildConfigField(<span class="string">"String"</span>, <span class="string">"BASE_URL"</span>, <span class="string">"\""</span> + project.BASE_URL_TEST + <span class="string">"\""</span>)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mumubin5/Android-" target="_blank" rel="noopener">github版本:Android 使用gradle打包的各种配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在AS中利用gradle打包，可以高效并且自由地配置各种参数，发布不同的版本。关于配置gradle文件的一些做法，总结为如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android studio" scheme="http://echomu.github.io/tags/Android-studio/"/>
    
  </entry>
  
  <entry>
    <title>gradle打包并推送到git远程库</title>
    <link href="http://echomu.github.io/2016/09/08/gradle%E6%89%93%E5%8C%85%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0git%E8%BF%9C%E7%A8%8B%E5%BA%93/"/>
    <id>http://echomu.github.io/2016/09/08/gradle打包并推送到git远程库/</id>
    <published>2016-09-08T08:39:59.000Z</published>
    <updated>2018-02-07T09:08:53.849Z</updated>
    
    <content type="html"><![CDATA[<p>我们希望在打包的时候能够做到：</p><ol><li>使用 Android studio ,使用 gradle 进行构建；</li><li>在实际开发中，需要配置我们的 gradle 脚本以支持参数化的方式；</li><li>想获得一个可配置打包脚本的方法，允许配置人员根据需要修改服务器地址，versionCode, versionName等；</li><li>隔离的源代码的配置，使用者在shell脚本里进行配置。</li></ol><p>在阅读本文之前，一些关于gradle的配置项，可以通过这篇文章复习了解<br><a href="http://www.jianshu.com/p/1a320062aedd" target="_blank" rel="noopener">Android使用gradle打包的各种配置</a></p><a id="more"></a><p>#####一.自动打包和推送git的shell脚本<br>XXX_autoReleaseToGit.sh<br>这个脚本会顺序执行打包脚本XXX_assemble.sh和git操作脚本XXX_PUSH_APK.sh，结果是可以根据使用者的选择打包出发布版本、测试版本（极光正式key）和测试版本（极光测试key）。当然，你也可以通过修改脚本，一次性打包出以上版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 自动打包和推送git的shell脚本</span><br><span class="line"># 打开自动打包工具目录</span><br><span class="line"># 执行打包脚本</span><br><span class="line">cd 你的自动打包工具目录</span><br><span class="line">echo <span class="string">"进入自动化打包脚本目录..."</span></span><br><span class="line">pwd</span><br><span class="line">#使用gradle命令进行打包</span><br><span class="line">echo <span class="string">"使用gradle命令开始打包..."</span></span><br><span class="line">`dirname $&#123;<span class="number">0</span>&#125;`/XXX_assemble.sh</span><br><span class="line">#推送到git远程库</span><br><span class="line">echo <span class="string">"git操作开始..."</span></span><br><span class="line">`dirname $&#123;<span class="number">0</span>&#125;`/XXX_PUSH_APK.sh</span><br></pre></td></tr></table></figure><p><strong><strong>执行shell脚本进行自动打包</strong></strong><br>XXX_assembleRelease.sh<br>这个脚本包含了代码分支更新、代码更新、选择打包环境和第三方服务（极光推送）的操作。</p><p>参数都是自定义的，这里写入了多个参数，有指定的各个服务器地址，apk输入文件路径，和环境标识后缀名、极光标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">project_path=<span class="string">"你的工程根目录"</span></span><br><span class="line">gradlew_path=<span class="string">"$&#123;project_path&#125;/gradlew"</span></span><br><span class="line"># 切换到项目目录</span><br><span class="line">cd $&#123;project_path&#125;</span><br><span class="line">echo <span class="string">"切换到项目目录..."</span></span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line"># 进行代码分支选择 </span><br><span class="line">echo <span class="string">"正在更新代码分支信息..."</span></span><br><span class="line"></span><br><span class="line"># 更新分支信息</span><br><span class="line">git fetch -p</span><br><span class="line"></span><br><span class="line"># 获取所有远程分支信息</span><br><span class="line">remote_branchs=`git branch -r`</span><br><span class="line"># 分割成数组后让使用者选择打包分支</span><br><span class="line">echo <span class="string">"请选择待打包分支: "</span></span><br><span class="line">echo <span class="string">"请选择待打包分支: "</span></span><br><span class="line">arr=($&#123;remote_branchs<span class="comment">// /&#125;)</span></span><br><span class="line">index=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i in $&#123;arr[@]&#125;; <span class="keyword">do</span></span><br><span class="line"> #statements</span><br><span class="line"> echo $&#123;index&#125;<span class="string">". "</span>$&#123;i:<span class="number">7</span>&#125;</span><br><span class="line"> ((index++))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># 读取使用者数据</span><br><span class="line">read branch_index</span><br><span class="line">echo <span class="string">"你选择要打包的分支是： $&#123;branch_index&#125; "</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z $&#123;branch_index&#125; ]]; then</span><br><span class="line"> echo <span class="string">"Error: 选择的分支序号不合法"</span> </span><br><span class="line"> echo <span class="string">"Error: 选择的分支序号不合法"</span></span><br><span class="line">fi</span><br><span class="line">((branch_index--))</span><br><span class="line"># 切换branch并拉取最新代码</span><br><span class="line">echo <span class="string">"切换到该分支并拉取最新代码..."</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;arr[$&#123;branch_index&#125;]&#125; =~ <span class="string">"HEAD"</span> ]]; then</span><br><span class="line"> echo <span class="string">"Error: 不能切换到该分支($&#123;arr[$&#123;branch_index&#125;]&#125;)"</span> </span><br><span class="line"> echo <span class="string">"Error: 不能切换到该分支($&#123;arr[$&#123;branch_index&#125;]&#125;)"</span></span><br><span class="line"> exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># git reset --hard HEAD</span><br><span class="line">#result_code=$?</span><br><span class="line">git checkout $&#123;arr[$&#123;branch_index&#125;]:<span class="number">7</span>&#125; </span><br><span class="line">result_code=$?</span><br><span class="line">git pull </span><br><span class="line">result_code=$?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;result_code&#125; != <span class="number">0</span> ]]; then</span><br><span class="line"> echo <span class="string">"Error: 拉取代码失败"</span> </span><br><span class="line"> echo <span class="string">"Error: 拉取代码失败"</span></span><br><span class="line"> exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># gradlew文件增加可执行权限</span><br><span class="line">chmod u+x $&#123;gradlew_path&#125;</span><br><span class="line"></span><br><span class="line">echo <span class="string">"请选择版本的环境地址"</span></span><br><span class="line">echo <span class="string">"1:正式环境"</span></span><br><span class="line">echo <span class="string">"2:测试环境"</span></span><br><span class="line"></span><br><span class="line">read environment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 执行gradlew.bat 进行打包</span><br><span class="line"># -P表示后面的是自定义参数 如-POUT_PUT_DIR_PARA 表示自定义了一个OUT_PUT_DIR_PARA参数 后面是赋值</span><br><span class="line"># OUT_PUT_DIR_PARA APK输出目录</span><br><span class="line"># BASE_URL_PARA 服务器基本请求地址</span><br><span class="line"># ENVIRONMENT_PARA 服务器环境表示 1.real 正式环境 2.test 测试环境</span><br><span class="line"># JPUSH_APPKEY_PARA 只要有自定义这个参数 就代表要输出极光推送的APK</span><br><span class="line"><span class="keyword">if</span> [[ $&#123;environment&#125; = <span class="number">1</span> ]]; then</span><br><span class="line"> #statements</span><br><span class="line"> echo <span class="string">"你选择要打包的地址是：正式环境"</span></span><br><span class="line"> $&#123;gradlew_path&#125; assembleRelease -POUT_PUT_DIR_PARA=你的APK输出目录 -PBASE_URL_PARA=你的正式环境服务器地址 -PENVIRONMENT_PARA=real --info --stacktrace</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> #statements</span><br><span class="line"> echo <span class="string">"你选择要打包的地址是：测试环境"</span></span><br><span class="line"> echo <span class="string">"----"</span></span><br><span class="line"> echo <span class="string">"请选择版本的极光Key"</span></span><br><span class="line"> echo <span class="string">"1:正式Key"</span></span><br><span class="line"> echo <span class="string">"2:测试Key"</span></span><br><span class="line"></span><br><span class="line"> read jpushAppKey</span><br><span class="line"> <span class="keyword">if</span> [[ $&#123;jpushAppKey&#125; = <span class="number">1</span> ]]; then</span><br><span class="line">  #statements</span><br><span class="line">  echo <span class="string">"你选择要打包的极光Key是：正式Key"</span></span><br><span class="line">  $&#123;gradlew_path&#125; assembleRelease -POUT_PUT_DIR_PARA=你的APK输出目录 -PBASE_URL_PARA=你的测试环境服务器地址 -PENVIRONMENT_PARA=test --info --stacktrace</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  #statements</span><br><span class="line">  echo <span class="string">"你选择要打包的极光Key是：测试Key"</span></span><br><span class="line">  $&#123;gradlew_path&#125; assembleRelease -POUT_PUT_DIR_PARA=你的APK输出目录 -PBASE_URL_PARA=你的测试环境服务器地址 -PENVIRONMENT_PARA=test_int -PJPUSH_APPKEY_PARA=<span class="number">1</span> --info --stacktrace</span><br><span class="line"> fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>####二.配置gradle文件<br><strong>配置 defaultConfig 节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;  </span><br><span class="line">   <span class="keyword">if</span> (project.hasProperty(<span class="string">'JPUSH_APPKEY_PARA'</span>)) &#123;            </span><br><span class="line">       <span class="comment">//如果有指定极光key的自定义参数，那么就设置极光推送测试key对应的appId                         </span></span><br><span class="line">        applicationId project.APPLICATIONID_JPUSH        </span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">       <span class="comment">//工程本来的appId            </span></span><br><span class="line">       applicationId project.APPLICATIONID_RELEASE        </span><br><span class="line">   &#125;        </span><br><span class="line">  <span class="comment">//最低安装版本Android 4.0        </span></span><br><span class="line">  minSdkVersion rootProject.ext.minSdkVersion        </span><br><span class="line">  targetSdkVersion rootProject.ext.targetSdkVersion        </span><br><span class="line">  versionCode rootProject.ext.versionCode        </span><br><span class="line">  versionName rootProject.ext.versionName        </span><br><span class="line">  <span class="comment">// dex突破65535的限制        </span></span><br><span class="line">  multiDexEnabled <span class="keyword">true</span>        </span><br><span class="line">  manifestPlaceholders = [                </span><br><span class="line">        <span class="comment">// 默认是umeng测试的渠道                </span></span><br><span class="line">        UMENG_CHANNEL_VALUE: <span class="string">"TEST"</span>,                </span><br><span class="line">        <span class="comment">// 默认是正式的极光key </span></span><br><span class="line">        JPUSH_APPKEY: project.JPUSH_APPKEY_VALUE_RELEASE        </span><br><span class="line">  ]        </span><br><span class="line">  <span class="comment">//配置 defaultConfig 下的  buildConfigField字段 ,这是为了 代码编译的方便，使得在各个环境下都有 BASE_URL 这个字段。        </span></span><br><span class="line">  <span class="comment">//正式服务器        </span></span><br><span class="line">  buildConfigField(<span class="string">"String"</span>, <span class="string">"BASE_URL"</span>, <span class="string">"\""</span> + project.BASE_URL_REAL + <span class="string">"\""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置debug节点各个服务器地址的值</strong><br>同配置defaultConfig节点一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">debug &#123;</span><br><span class="line">    <span class="comment">//测试服务器请求</span></span><br><span class="line">    buildConfigField(<span class="string">"String"</span>, <span class="string">"BASE_URL"</span>, <span class="string">"\""</span> + project.BASE_URL_TEST + <span class="string">"\""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置release节点</strong><br>读取上面XXX_assemble.sh文件传入的参数的值作为各个服务器地址的值。<br>在读取参数的时候，我们先检查参数是否存在，使用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project.hasProperty(<span class="string">'参数名'</span>)</span><br></pre></td></tr></table></figure><p>所有通过命令行传入的参数都或作为 project 内建对象的属性，我们这里判断了指定的参数名是否存在。如何使用参数呢？直接使用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">versionCode Integer.parseInt(VERSION_CODE_PARA) <span class="comment">//注意这里，进行了转型，从字符串转型为 int 类型</span></span><br><span class="line">versionName VERSION_NAME_PARA</span><br></pre></td></tr></table></figure><p>和普通的变量使用方法是一样的。我们还会遇到在字符串中使用的时候，可以使用表达式 来引用，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;参数名&#125;</span><br></pre></td></tr></table></figure><p>示例;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileName = fileName.replace(<span class="string">".apk"</span>, <span class="string">"-$&#123;android.defaultConfig.versionName&#125;.apk"</span>)</span><br></pre></td></tr></table></figure></p><p>详细如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个打包时间</span></span><br><span class="line"><span class="function">def <span class="title">releaseTime</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyyMMdd"</span>, TimeZone.getTimeZone(<span class="string">"UTC"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;</span><br><span class="line">      debug &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      ...    </span><br><span class="line">      release &#123;</span><br><span class="line">        ... </span><br><span class="line">        <span class="keyword">if</span> (project.hasProperty(<span class="string">'JPUSH_APPKEY_PARA'</span>)) &#123;                </span><br><span class="line">            <span class="comment">//接收自定义参数的值，指定测试的极光key</span></span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line">                  JPUSH_APPKEY: project.JPUSH_APPKEY_VALUE_DEBUG</span><br><span class="line">            ]            </span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        applicationVariants.all &#123; </span><br><span class="line">            variant -&gt;    variant.outputs.each &#123; output -&gt;        </span><br><span class="line">                def outputFile = output.outputFile        </span><br><span class="line">                <span class="keyword">if</span> (outputFile != <span class="keyword">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)) &#123;           </span><br><span class="line">                    <span class="comment">// 输出apk名称为XXX20160328_v1.0.0_vc10_XXXX_test.apk        </span></span><br><span class="line">                    <span class="keyword">if</span> (project.hasProperty(<span class="string">'ENVIRONMENT_PARA'</span>) </span><br><span class="line">                    def fileName=<span class="string">" XXX$&#123;releaseTime()&#125;_v$&#123;defaultConfig.versionName&#125;_vc$&#123;defaultConfig.versionCode&#125;_$&#123;variant.productFlavors[0].name&#125;_$&#123;ENVIRONMENT_PARA&#125;.apk"</span>                  </span><br><span class="line">                    <span class="comment">//控制输出的APK的存放路径                </span></span><br><span class="line">                    <span class="keyword">if</span> (project.hasProperty(<span class="string">'OUT_PUT_DIR_PARA'</span>)) &#123;                    </span><br><span class="line">                        File output_dir1 = file(<span class="string">"$&#123;OUT_PUT_DIR_PARA&#125;"</span>);                    </span><br><span class="line">                        output.outputFile = <span class="keyword">new</span> File(output_dir1, fileName)                    </span><br><span class="line">                         println <span class="string">"输出文件位置： "</span> + output.outputFile                </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;                    </span><br><span class="line">                        output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)                    </span><br><span class="line">                        println <span class="string">"输出文件位置： "</span> + output.outputFile                </span><br><span class="line">                    &#125;            </span><br><span class="line">                 &#125;        </span><br><span class="line">              &#125;    </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        productFlavors.all &#123; </span><br><span class="line">            flavor -&gt;    flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####三.打包完成之后，将APK提交并推送到git远程库<br>XXX_PUSH_APK.sh</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd 你的APK输出目录</span><br><span class="line">pwd</span><br><span class="line">#同步远程库</span><br><span class="line">git pull;</span><br><span class="line">#add新增加的APK文件</span><br><span class="line">git add *;</span><br><span class="line">#提交APK</span><br><span class="line">git commit -m <span class="string">'提交APK'</span>;</span><br><span class="line">#推送到远程库</span><br><span class="line">git push;</span><br></pre></td></tr></table></figure><p>将以上工作做完之后，我们就可以通过执行脚本来打包了，我们可以打出一系列debug和release的不同服务器环境的版本，对应不同的第三方服务的版本（如极光推送生产环境和发布环境的版本）。当然，你可以修改脚本，写入定时执行功能，将脚本完全写成自动化定时执行的脚本。</p><p><a href="https://github.com/mumubin5/Android-" target="_blank" rel="noopener">github版本:Android 自动化打包实践 gradle打包并推送到git远程库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们希望在打包的时候能够做到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 Android studio ,使用 gradle 进行构建；&lt;/li&gt;
&lt;li&gt;在实际开发中，需要配置我们的 gradle 脚本以支持参数化的方式；&lt;/li&gt;
&lt;li&gt;想获得一个可配置打包脚本的方法，允许配置人员根据需要修改服务器地址，versionCode, versionName等；&lt;/li&gt;
&lt;li&gt;隔离的源代码的配置，使用者在shell脚本里进行配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在阅读本文之前，一些关于gradle的配置项，可以通过这篇文章复习了解&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/1a320062aedd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android使用gradle打包的各种配置&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android studio" scheme="http://echomu.github.io/tags/Android-studio/"/>
    
  </entry>
  
  <entry>
    <title>代码混淆在AS的实践</title>
    <link href="http://echomu.github.io/2016/09/08/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%9C%A8AS%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <id>http://echomu.github.io/2016/09/08/代码混淆在AS的实践/</id>
    <published>2016-09-08T08:36:58.000Z</published>
    <updated>2018-02-07T09:09:04.949Z</updated>
    
    <content type="html"><![CDATA[<p>####一.关于混淆<br>ProGuard是一个混淆代码的开源项目，它的主要作用是混淆代码，还包括以下4个功能：<br>1.压缩(Shrink)：检测并移除代码中无用的类、字段、方法和特性（Attribute）；<br>2.优化(Optimize)：对字节码进行优化，移除无用的指令；<br>3.混淆(Obfuscate)：使用a，b，c，d这样简短而无意义的名称，对类、字段和方法进行重命名；<br>4.预检(Preveirfy)：在Java平台上对处理后的代码进行预检，确保加载的class文件是可执行的。</p><p>但是我们还应该看到以下几点问题的存在：</p><a id="more"></a><ul><li>代码混淆和编译成.so的安全性都是相对的，都是增加了破解的难度。</li><li>有的人破解是需要了解其代码的 代码混淆可能会让别人花费更多时间，但是有的破解是不需要看其源码的，比如在一个apk里面嵌入广告，只需要找到启动广告和放入广告代码和xml注册广告权限就可以了。</li><li>android的4大组件不允许被混淆 这就是一个很大的问题，对于反编译的人来说这就是入口。</li></ul><p>####二.在AS中开启混淆<br>在proguard-rules.pro中配置混淆，将minifyEnabled设置为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//混淆编译</span></span><br><span class="line">minifyEnabled <span class="keyword">true</span></span><br><span class="line"><span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></span><br></pre></td></tr></table></figure><p>####三.如何编写混淆文件<br>1.加入基本混淆项<br>2.针对该工程的混淆项<br>3.针对第三方库的解决</p><p>在proguard-rules.pro中加入以下混淆模板，基本可以涵盖大部分情况</p><pre><code class="java">#下面是常见的proguard.cfg配置项#指定代码的压缩级别-optimizationpasses <span class="number">5</span>#包名不混合大小写-dontusemixedcaseclassnames#不去忽略非公共的库类-dontskipnonpubliclibraryclasses# 指定不去忽略非公共的库的类的成员-dontskipnonpubliclibraryclassmembers#优化  不优化输入的类文件-dontoptimize#预校验-dontpreverify#混淆时是否记录日志-verbose# 混淆时所采用的算法-optimizations !code/simplification/arithmetic,!field<span class="comment">/*,!class/merging/*</span><span class="comment">#保护注解</span><span class="comment">-keepattributes *Annotation*</span><span class="comment"></span><span class="comment">#忽略警告</span><span class="comment">-ignorewarning</span><span class="comment"></span><span class="comment">##记录生成的日志数据,gradle build时在本项目根目录输出##</span><span class="comment">#apk 包内所有 class 的内部结构</span><span class="comment">-dump class_files.txt</span><span class="comment">#未混淆的类和成员-printseeds seeds.txt</span><span class="comment">#列出从 apk 中删除的代码</span><span class="comment">-printusage unused.txt</span><span class="comment">#混淆前后的映射-printmapping mapping.txt</span><span class="comment">########记录生成的日志数据，gradle build时 在本项目根目录输出-end#####</span><span class="comment"></span><span class="comment">#需要保留的东西</span><span class="comment"># 保持哪些类不被混淆</span><span class="comment">-keep public class * extends android.app.Fragment</span><span class="comment">-keep public class * extends android.app.Activity</span><span class="comment">-keep public class * extends android.app.Application</span><span class="comment">-keep public class * extends android.app.Service</span><span class="comment">-keep public class * extends android.content.BroadcastReceiver</span><span class="comment">-keep public class * extends android.content.ContentProvider</span><span class="comment">-keep public class * extends android.app.backup.BackupAgentHelper</span><span class="comment">-keep public class * extends android.preference.Preference</span><span class="comment">-keep public class * extends android.support.v4.**</span><span class="comment">-keep public class com.android.vending.licensing.ILicensingService</span><span class="comment"></span><span class="comment">#如果有引用v4包可以添加下面这行</span><span class="comment">-keep public class * extends android.support.v4.app.Fragment</span><span class="comment"></span><span class="comment">##########JS接口类不混淆，否则执行不了</span><span class="comment">-dontwarn com.android.JsInterface.**</span><span class="comment">-keep class com.android.JsInterface.** {*; }</span><span class="comment"></span><span class="comment">#极光推送和百度lbs android sdk一起使用proguard 混淆的问题#http的类被混淆后，导致apk定位失败，保持apache 的http类不被混淆就好了</span><span class="comment">-dontwarn org.apache.**</span><span class="comment">-keep class org.apache.**{ *; }</span><span class="comment"></span><span class="comment">-keep public class * extends android.view.View {        </span><span class="comment">  public &lt;init&gt;(android.content.Context);        </span><span class="comment">  public &lt;init&gt;(android.content.Context, android.util.AttributeSet);        </span><span class="comment">  public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><span class="comment">  public void set*(...);    </span><span class="comment"> }</span><span class="comment"></span><span class="comment">#保持 native 方法不被混淆</span><span class="comment">-keepclasseswithmembernames class * {        </span><span class="comment">  native &lt;methods&gt;;    </span><span class="comment">}</span><span class="comment"></span><span class="comment">#保持自定义控件类不被混淆</span><span class="comment">-keepclasseswithmembers class * {        </span><span class="comment">  public &lt;init&gt;(android.content.Context, android.util.AttributeSet);    </span><span class="comment">}</span><span class="comment"></span><span class="comment">#保持自定义控件类不被混淆</span><span class="comment">-keepclassmembers class * extends android.app.Activity {       </span><span class="comment">  public void *(android.view.View);    </span><span class="comment">}</span><span class="comment"></span><span class="comment">#保持 Parcelable 不被混淆</span><span class="comment">-keep class * implements android.os.Parcelable {      </span><span class="comment">  public static final android.os.Parcelable$Creator *;    </span><span class="comment">}</span><span class="comment"></span><span class="comment">#保持 Serializable 不被混淆</span><span class="comment">-keepnames class * implements java.io.Serializable</span><span class="comment"></span><span class="comment">#保持 Serializable 不被混淆并且enum 类也不被混淆</span><span class="comment">-keepclassmembers class * implements java.io.Serializable {        </span><span class="comment">    static final long serialVersionUID;        </span><span class="comment">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><span class="comment">    !static !transient &lt;fields&gt;;        </span><span class="comment">    !private &lt;fields&gt;;        </span><span class="comment">    !private &lt;methods&gt;;        </span><span class="comment">    private void writeObject(java.io.ObjectOutputStream);        </span><span class="comment">    private void readObject(java.io.ObjectInputStream);        </span><span class="comment">    java.lang.Object writeReplace();        </span><span class="comment">    java.lang.Object readResolve();    </span><span class="comment">}</span><span class="comment"></span><span class="comment">#保持枚举 enum 类不被混淆 如果混淆报错，建议直接使用上面的 -keepclassmembers class * implements java.io.Serializable即可</span><span class="comment">-keepclassmembers enum * {        </span><span class="comment">      public static **[] values();        </span><span class="comment">      public static ** valueOf(java.lang.String);    </span><span class="comment">}</span><span class="comment"></span><span class="comment">-keepclassmembers class * {        </span><span class="comment">      public void *ButtonClicked(android.view.View);    </span><span class="comment">}</span><span class="comment"></span><span class="comment">#不混淆资源类</span><span class="comment">-keepclassmembers class **.R$* {        </span><span class="comment">      public static &lt;fields&gt;;    </span><span class="comment">}</span><span class="comment"></span><span class="comment">#避免混淆泛型 如果混淆报错建议关掉    </span><span class="comment">#–keepattributes Signature</span><span class="comment"></span><span class="comment">######混淆保护自己项目的部分代码以及引用的第三方jar包library########</span><span class="comment">#如果引用了v4或者v7包</span><span class="comment">-dontwarn android.support.**</span><span class="comment"></span><span class="comment">#如果用到Gson解析包的，直接添加下面这几行就能成功混淆，不然会报错    </span><span class="comment">#gson    </span><span class="comment">#-libraryjars libs/gson-2.2.2.jar    </span><span class="comment">-keepattributes Signature    </span><span class="comment"># Gson specific classes    </span><span class="comment">-keep class sun.misc.Unsafe { *; }    </span><span class="comment"># Application classes that will be serialized/deserialized over Gson    </span><span class="comment">-keep class com.google.gson.examples.android.model.** { *; }  </span><span class="comment"></span><span class="comment">#客户端代码中的JavaBean(实体类)的类名与其字段名称全部变成了a、b、c、d等等字符串，这与服务端返回的json字符串中的不一致，导致解析失败。所以，解决的办法是：在进行混淆编译进行打包apk的时候，过滤掉存放所有JavaBean（实体类)的包不进行混淆编译      </span><span class="comment">-keep class com.android.model.** {*;}</span><span class="comment"></span><span class="comment">####混淆保护自己项目的部分代码以及引用的第三方jar包library-end####</span></code></pre><p><a href="https://github.com/mumubin5/Android-" target="_blank" rel="noopener">github版本:代码混淆在AS的实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####一.关于混淆&lt;br&gt;ProGuard是一个混淆代码的开源项目，它的主要作用是混淆代码，还包括以下4个功能：&lt;br&gt;1.压缩(Shrink)：检测并移除代码中无用的类、字段、方法和特性（Attribute）；&lt;br&gt;2.优化(Optimize)：对字节码进行优化，移除无用的指令；&lt;br&gt;3.混淆(Obfuscate)：使用a，b，c，d这样简短而无意义的名称，对类、字段和方法进行重命名；&lt;br&gt;4.预检(Preveirfy)：在Java平台上对处理后的代码进行预检，确保加载的class文件是可执行的。&lt;/p&gt;
&lt;p&gt;但是我们还应该看到以下几点问题的存在：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android studio" scheme="http://echomu.github.io/tags/Android-studio/"/>
    
  </entry>
  
</feed>
