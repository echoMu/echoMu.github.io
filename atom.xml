<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>echoMu</title>
  <icon>https://www.gravatar.com/avatar/b3fc17312645f8f777b12e4537c26410</icon>
  <subtitle>听风在鼓舞，还有我作伴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://echomu.github.io/"/>
  <updated>2018-02-07T07:51:33.077Z</updated>
  <id>http://echomu.github.io/</id>
  
  <author>
    <name>echoMu</name>
    <email>xiaocaiyibin100@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义View实践之EditText字数的简单计数器</title>
    <link href="http://echomu.github.io/2018/02/07/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5%E4%B9%8BEditText%E5%AD%97%E6%95%B0%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://echomu.github.io/2018/02/07/自定义View实践之EditText字数的简单计数器/</id>
    <published>2018-02-07T07:51:33.000Z</published>
    <updated>2018-02-07T07:51:33.077Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义View实践之圆形进度ProgressBar</title>
    <link href="http://echomu.github.io/2016/02/07/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6ProgressBar/"/>
    <id>http://echomu.github.io/2016/02/07/自定义View实践之圆形进度ProgressBar/</id>
    <published>2016-02-07T07:36:36.000Z</published>
    <updated>2018-02-07T07:54:19.514Z</updated>
    
    <content type="html"><![CDATA[<p>这是继承View类的一个自定义View。<br>为了实现一个带有进度文本的圆形ProgressBar，我们自定义开发一个RoundProgressBar。</p><a id="more"></a><p>效果是这样的<br><img src="http://upload-images.jianshu.io/upload_images/817079-7b5fa86d50c91237.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="device-2017-02-24-165125.png"></p><p>1.新建一个ProgressBar类继承View类，复写其构造函数和onDraw函数；<br>2.在values中建立一个attrs.xml文件来存放自定义view的属性；<br>3.从xml文件中获取自定义的view类中的各个属性值；<br>4.同时对使用者提供set和get方法进行各个属性的设置；</p><p>首先要整理出我们需要的view的属性有哪些，我们定义了这些属性：</p><table><thead><tr><th>属性名称</th><th style="text-align:center">属性作用</th></tr></thead><tbody><tr><td>max</td><td style="text-align:center">最大进度</td></tr><tr><td>startAngle</td><td style="text-align:center">进度从圆环的哪个角度开始走</td></tr><tr><td>backColor</td><td style="text-align:center">圆环内部的填充色</td></tr><tr><td>roundColor</td><td style="text-align:center">圆环的颜色</td></tr><tr><td>roundProgressColor</td><td style="text-align:center">圆环进度的颜色</td></tr><tr><td>roundWidth</td><td style="text-align:center">圆环宽度</td></tr><tr><td>textColor</td><td style="text-align:center">中心文字的颜色</td></tr><tr><td>textSize</td><td style="text-align:center">中心文字的大小</td></tr><tr><td>textIsDisplayable</td><td style="text-align:center">中心文字是否显示</td></tr><tr><td>style = 0/1</td><td style="text-align:center">进度的风格，实心或者空心</td></tr></tbody></table><p>通过键值对的形式来存放键（name）：属性名，和值（format）：属性的类型（限制输入的类型），attrs.xml文件如下;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;declare-styleable name=<span class="string">"RoundProgressBar"</span>&gt;</span><br><span class="line">    &lt;attr name="max" format="integer"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="startAngle" format="integer"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="backColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="roundColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="roundProgressColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="roundWidth" format="dimension"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="textColor" format="color"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="textSize" format="dimension"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name="textIsDisplayable" format="boolean"&gt;&lt;/attr&gt;</span><br><span class="line">    &lt;attr name=<span class="string">"style"</span>&gt;</span><br><span class="line">        &lt;enum name="STROKE" value="0"&gt;&lt;/enum&gt;</span><br><span class="line">        &lt;enum name="FILL" value="1"&gt;&lt;/enum&gt;</span><br><span class="line">    &lt;/attr&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>有了这些属性，我们就可以获取它们的值了，在ProgressBar类中的构造函数进行初始化工作，使用TypedArray，得到每一项属性的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TypedArray mTypedArray = context.obtainStyledAttributes(attrs, R.styleable.RoundProgressBar);</span><br><span class="line"><span class="comment">//获取自定义属性和默认值，第一个参数是从用户属性中得到的设置，如果用户没有设置，那么就用默认的属性，即：第二个参数</span></span><br><span class="line"><span class="comment">//圆环的颜色</span></span><br><span class="line">roundColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundColor, Color.BLACK);</span><br><span class="line"><span class="comment">//圆环进度的颜色</span></span><br><span class="line">roundProgressColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundProgressColor, Color.RED);</span><br><span class="line"><span class="comment">//中间进度百分比的字符串的颜色</span></span><br><span class="line">textColor = mTypedArray.getColor(R.styleable.RoundProgressBar_textColor, Color.BLUE);</span><br><span class="line"><span class="comment">//文字的大小</span></span><br><span class="line">textSize = mTypedArray.getDimension(R.styleable.RoundProgressBar_textSize, <span class="number">24</span>);</span><br><span class="line"><span class="comment">//圆环的宽度</span></span><br><span class="line">roundWidth = mTypedArray.getDimension(R.styleable.RoundProgressBar_roundWidth, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//最大进度</span></span><br><span class="line">max = mTypedArray.getInteger(R.styleable.RoundProgressBar_max, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//是否显示中间的进度</span></span><br><span class="line">textIsDisplayable = mTypedArray.getBoolean(R.styleable.RoundProgressBar_textIsDisplayable, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//进度的风格，实心或者空心</span></span><br><span class="line">style = mTypedArray.getInt(R.styleable.RoundProgressBar_style, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//进度开始的角度数</span></span><br><span class="line">startAngle = mTypedArray.getInt(R.styleable.RoundProgressBar_startAngle, -<span class="number">90</span>);</span><br><span class="line"><span class="comment">// 圆形颜色</span></span><br><span class="line">backColor = mTypedArray.getColor(R.styleable.RoundProgressBar_backColor, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回收</span></span><br><span class="line">mTypedArray.recycle();</span><br></pre></td></tr></table></figure><p>一切准备工作做完，我们就可以在onDraw函数中开始绘制了：</p><pre><code class="java"><span class="meta">@Override</span><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>{    <span class="keyword">super</span>.onDraw(canvas);    <span class="comment">//进行绘制</span>    <span class="comment">//1.画最外层的大圆环</span>    <span class="comment">//获取圆心的x坐标</span>    <span class="keyword">int</span> centre = getWidth() / <span class="number">2</span>;    <span class="comment">//圆环的半径</span>    <span class="keyword">int</span> radius = (<span class="keyword">int</span>) (centre - roundWidth / <span class="number">2</span>);    <span class="comment">//设置圆环的颜色</span>    paint.setColor(roundColor);    <span class="comment">//设置空心</span>    paint.setStyle(Paint.Style.STROKE);    <span class="comment">//设置圆环的宽度</span>    paint.setStrokeWidth(roundWidth);    <span class="comment">//消除锯齿</span>    paint.setAntiAlias(<span class="keyword">true</span>);    <span class="comment">//画出圆环</span>    canvas.drawCircle(centre, centre, radius, paint);    <span class="keyword">if</span> (backColor != <span class="number">0</span>) {        paint.setColor(backColor);        paint.setStyle(Paint.Style.FILL);        canvas.drawCircle(centre, centre, radius, paint);    }    <span class="comment">//画进度百分比字体</span>    paint.setStrokeWidth(<span class="number">0</span>);    paint.setColor(textColor);    paint.setTextSize(textSize);    paint.setTypeface(Typeface.DEFAULT_BOLD);    <span class="comment">//中间的进度百分比，先转换成float在进行除法运算，不然都为0</span>    <span class="keyword">int</span> percent = (<span class="keyword">int</span>) (((<span class="keyword">float</span>) progress / (<span class="keyword">float</span>) max) * <span class="number">100</span>);    <span class="comment">//测量字体宽度，我们需要根据字体的宽度设置在圆环中间</span>    <span class="keyword">float</span> textWidth = paint.measureText(percent + <span class="string">"%"</span>);    <span class="keyword">if</span> (textIsDisplayable &amp;&amp; percent != <span class="number">0</span> &amp;&amp; style == STROKE) {        <span class="comment">//绘制文字</span>        <span class="comment">//宽 centre - textWidth / 2</span>        <span class="comment">//高 centre + textSize / 2</span>        canvas.drawText(percent + <span class="string">"%"</span>, centre - textWidth / <span class="number">2</span>, centre + textSize / <span class="number">2</span>, paint);    }    <span class="comment">//画圆弧 ，圆环的进度</span>    <span class="comment">//设置圆环的宽度</span>    paint.setStrokeWidth(roundWidth);    <span class="comment">//设置进度的颜色</span>    paint.setColor(roundProgressColor);    <span class="comment">//用于定义的圆弧的形状和大小的界限</span>    RectF oval = <span class="keyword">new</span> RectF(centre - radius, centre - radius, centre            + radius, centre + radius);    <span class="keyword">switch</span> (style) {        <span class="keyword">case</span> STROKE: {            paint.setStyle(Paint.Style.STROKE);            <span class="comment">/*第二个参数是进度开始的角度，-90表示从12点方向开始走进度，如果是0表示从三点钟方向走进度，依次类推</span><span class="comment">             *public void drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</span><span class="comment">                oval :指定圆弧的外轮廓矩形区域。</span><span class="comment">                startAngle: 圆弧起始角度，单位为度。</span><span class="comment">                sweepAngle: 圆弧扫过的角度，顺时针方向，单位为度。</span><span class="comment">                useCenter: 如果为True时，在绘制圆弧时将圆心包括在内，通常用来绘制扇形。</span><span class="comment">                paint: 绘制圆弧的画板属性，如颜色，是否填充等</span><span class="comment">             *</span><span class="comment">            */</span>            canvas.drawArc(oval, startAngle, <span class="number">360</span> * progress / max, <span class="keyword">false</span>, paint);  <span class="comment">//根据进度画圆弧</span>            <span class="keyword">break</span>;        }        <span class="keyword">case</span> FILL: {            paint.setStyle(Paint.Style.FILL_AND_STROKE);            <span class="keyword">if</span> (progress != <span class="number">0</span>)                canvas.drawArc(oval, startAngle, <span class="number">360</span> * progress / max, <span class="keyword">true</span>, paint);  <span class="comment">//根据进度画圆弧</span>            <span class="keyword">break</span>;        }    }}</code></pre><p>完成之后就可以使用它了，例如要这样的ProgressBar;</p><pre><code class="java">&lt;TextView    android:layout_width=<span class="string">"wrap_content"</span>    android:layout_height=<span class="string">"wrap_content"</span>    android:text=<span class="string">"无数字，环形"</span> /&gt;&lt;com.echomu.customsprogressbar.view.RoundProgressBar    android:id=<span class="string">"@+id/rpb_04"</span>    android:layout_width=<span class="string">"80dp"</span>    android:layout_height=<span class="string">"80dp"</span>    android:layout_margin=<span class="string">"8dp"</span>    app:startAngle=<span class="string">"30"</span>    app:roundColor=<span class="string">"#C6E2FF"</span>    app:roundWidth=<span class="string">"10dip"</span>    app:roundProgressColor=<span class="string">"#CD3333"</span>    app:textIsDisplayable=<span class="string">"false"</span>/&gt;</code></pre><p><a href="https://github.com/mumubin5/CustomsProgressBar" target="_blank" rel="noopener">github版：Android 自定义View实践之圆形进度ProgressBar</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是继承View类的一个自定义View。&lt;br&gt;为了实现一个带有进度文本的圆形ProgressBar，我们自定义开发一个RoundProgressBar。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自定义View" scheme="http://echomu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
</feed>
